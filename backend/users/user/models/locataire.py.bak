"""
Modèle pour les locataires
"""
from django.db import models
from django.core.validators import RegexValidator
from .base import BaseUser


class Locataire(BaseUser):
    """
    Modèle pour les locataires
    """
    
    # Informations personnelles
    birth_date = models.DateField(
        null=True,
        blank=True,
        help_text="Date de naissance"
    )
    
    # Informations de contact d'urgence
    emergency_contact_name = models.CharField(
        max_length=200,
        blank=True,
        help_text="Nom du contact d'urgence"
    )
    
    phone_regex = RegexValidator(
        regex=r'^\+?1?\d{9,15}$',
        message="Le numéro de téléphone doit être au format: '+999999999'. Jusqu'à 15 chiffres autorisés."
    )
    emergency_contact_phone = models.CharField(
        validators=[phone_regex],
        max_length=17,
        blank=True,
        help_text="Téléphone du contact d'urgence"
    )
    
    emergency_contact_relation = models.CharField(
        max_length=100,
        blank=True,
        help_text="Relation avec le contact d'urgence"
    )
    
    # Informations professionnelles
    occupation = models.CharField(
        max_length=200,
        blank=True,
        help_text="Profession"
    )
    employer = models.CharField(
        max_length=200,
        blank=True,
        help_text="Employeur"
    )
    monthly_income = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        help_text="Revenus mensuels"
    )
    
    # Informations de logement
    current_address = models.TextField(
        blank=True,
        help_text="Adresse actuelle"
    )
    current_city = models.CharField(
        max_length=100,
        blank=True,
        help_text="Ville actuelle"
    )
    current_postal_code = models.CharField(
        max_length=10,
        blank=True,
        help_text="Code postal actuel"
    )
    
    # Préférences de recherche
    preferred_budget_min = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        help_text="Budget minimum souhaité"
    )
    preferred_budget_max = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        help_text="Budget maximum souhaité"
    )
    preferred_cities = models.TextField(
        blank=True,
        help_text="Villes préférées (séparées par des virgules)"
    )
    preferred_property_types = models.TextField(
        blank=True,
        help_text="Types de biens préférés (séparés par des virgules)"
    )
    
    # Statut et vérification
    has_guarantor = models.BooleanField(
        default=False,
        help_text="A un garant"
    )
    guarantor_name = models.CharField(
        max_length=200,
        blank=True,
        help_text="Nom du garant"
    )
    guarantor_phone = models.CharField(
        validators=[phone_regex],
        max_length=17,
        blank=True,
        help_text="Téléphone du garant"
    )
    
    verification_documents_uploaded = models.BooleanField(
        default=False,
        help_text="Documents de vérification uploadés"
    )
    
    # Préférences de contact
    preferred_contact_method = models.CharField(
        max_length=20,
        choices=[
            ('email', 'Email'),
            ('phone', 'Téléphone'),
            ('sms', 'SMS'),
        ],
        default='email',
        help_text="Méthode de contact préférée"
    )
    
    # Notifications
    wants_notifications = models.BooleanField(
        default=True,
        help_text="Souhaite recevoir des notifications"
    )
    wants_market_updates = models.BooleanField(
        default=False,
        help_text="Souhaite recevoir des mises à jour du marché"
    )
    
    class Meta:
        verbose_name = "Locataire"
        verbose_name_plural = "Locataires"
        ordering = ['-created_at']
    
    def __str__(self):
        return self.get_full_name()
    
    def get_age(self):
        """Calcule l'âge du locataire"""
        if not self.birth_date:
            return None
        
        from datetime import date
        today = date.today()
        return today.year - self.birth_date.year - (
            (today.month, today.day) < (self.birth_date.month, self.birth_date.day)
        )
    
    def get_current_address(self):
        """Retourne l'adresse actuelle formatée"""
        if not self.current_address:
            return ""
        
        parts = [self.current_address]
        if self.current_postal_code and self.current_city:
            parts.append(f"{self.current_postal_code} {self.current_city}")
        
        return ", ".join(parts)
    
    def get_budget_range(self):
        """Retourne la fourchette de budget formatée"""
        if not self.preferred_budget_min and not self.preferred_budget_max:
            return "Non spécifié"
        
        min_budget = f"{self.preferred_budget_min:.0f}€" if self.preferred_budget_min else "0€"
        max_budget = f"{self.preferred_budget_max:.0f}€" if self.preferred_budget_max else "Illimité"
        
        return f"{min_budget} - {max_budget}"
    
    def is_verified_locataire(self):
        """Vérifie si le locataire est complètement vérifié"""
        return (
            self.is_verified and 
            self.verification_documents_uploaded and
            bool(self.monthly_income)
        )
    
    def save(self, *args, **kwargs):
        """Override save pour définir automatiquement le user_type"""
        self.user_type = 'locataire'
        super().save(*args, **kwargs)
